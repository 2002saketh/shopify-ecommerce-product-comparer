import puppeteer from "puppeteer";
import { GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";

export const getServerSideProps: GetServerSideProps<{ data: any }> = async (
  context
) => {
  // @TODO handle currency - set cart_currency cookie to USD for all requests or get currency from site
  const getProducts = async () => {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    await page.goto(
      "https://globalmagicshop.com.au/search?type=product&options%5Bprefix%5D=last&q=bicycle"
    );

    // Set screen size
    await page.setViewport({ width: 1080, height: 1024 });

    // @TODO consider going up a selector to get product wrapper so we can get the price, image, etc
    const products = await page.evaluate(() => {
      return Array.from(
        document.querySelectorAll(".ProductItem__Title > a")
      ).map((product) =>
        JSON.stringify({
          name: product.textContent,
          link: product.getAttribute("href"),
        })
      );
    });

    console.log("PRODUCTS", products.join("\r\n"));
    await browser.close();
    return products;
  };

  const allProducts = await getProducts();

  return {
    props: {
      allProducts,
    },
  };
};

const Home: NextPage = (props: Record<string, any>) => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  console.log("PDOD", props.allProducts);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        {props.allProducts.map((product: string, i: number) => {
          const parsed = JSON.parse(product);
          return (
            <div key={i}>
              <a href={`https://globalmagicshop.com.au${parsed.link}`}>
                {parsed.name}
              </a>
            </div>
          );
        })}
      </div>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
